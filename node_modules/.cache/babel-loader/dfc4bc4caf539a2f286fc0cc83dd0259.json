{"ast":null,"code":"var _jsxFileName = \"/Users/AllanSendagi/Desktop/newMail-front/src/components/mail/postmail.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton'; //mui\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close'; //redux\n\nimport { connect } from 'react-redux';\nimport { postMail, clearErrors } from '../../redux/actions/dataactions';\n\nconst styles = theme => ({\n  submitButton: {\n    position: 'relative',\n    float: 'right',\n    marginTop: 10\n  },\n  progressSpinner: {\n    position: 'absolute'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '91%',\n    top: '6%'\n  }\n});\n\nclass PostMail extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      body: '',\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.props.clearErrors();\n      this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.postMail({\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: '',\n        open: false,\n        errors: {}\n      });\n    }\n  }\n\n  render() {\n    const errors = this.state.errors;\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          loading = _this$props.UI.loading;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(MyButton, {\n      onClick: this.handleOpen,\n      tip: \"Post Mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(MyButton, {\n      tip: \"close\",\n      onClick: this.handleClose,\n      tipClassName: classes.closeButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Post a new Mail\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      label: \"MAIL\",\n      multiline: true,\n      rows: \"3\",\n      placeholder: \"whats your destination?\",\n      error: errors.body ? true : false,\n      helperText: errors.body,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submitButton,\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Submit\", loading && React.createElement(CircularProgress, {\n      size: 30,\n      className: classes.progressSpinner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nPostMail.propTypes = {\n  postMail: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  postMail,\n  clearErrors\n})(withStyles(styles)(PostMail));","map":{"version":3,"sources":["/Users/AllanSendagi/Desktop/newMail-front/src/components/mail/postmail.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","connect","postMail","clearErrors","styles","theme","submitButton","position","float","marginTop","progressSpinner","closeButton","left","top","PostMail","state","open","body","errors","handleOpen","setState","handleClose","props","handleChange","event","target","name","value","handleSubmit","preventDefault","componentWillReceiveProps","nextProps","UI","loading","render","classes","textField","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\n\n//mui\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\n\n//redux\nimport { connect } from 'react-redux';\nimport { postMail, clearErrors } from '../../redux/actions/dataactions';\n\nconst styles = theme => ({\n\n\tsubmitButton: {\n\t\tposition: 'relative',\n\t\tfloat: 'right',\n\t\tmarginTop: 10\n\t},\n\tprogressSpinner: {\n\t\tposition: 'absolute'\n\t},\n\tcloseButton: {\n\t\tposition: 'absolute',\n\t\tleft: '91%',\n\t\ttop: '6%'\n\t}\n})\nclass PostMail extends Component {\n\tstate= {\n\t\topen: false,\n\t\tbody:'',\n\t\terrors: {}\n\t}\n\tcomponentWillReceiveProps(nextProps){\n\t\tif (nextProps.UI.errors) {\n\t\t\tthis.setState({\n\t\t\t\terrors: nextProps.UI.errors\n\t\t\t})\n\t\t}\n\t\tif (!nextProps.UI.errors && !nextProps.UI.loading) {\n\t\t\tthis.setState({body: '', open: false, errors:{}});\t\t}\n\t}\n\thandleOpen = () => {\n\t\tthis.setState({open: true})\n\t}\n\thandleClose= () => {\n\t\tthis.props.clearErrors()\n\t\tthis.setState({open: false, errors: {}})\n\t}\n\thandleChange=(event) => {\n\t\tthis.setState({[event.target.name] : event.target.value})\n\t}\n\thandleSubmit =(event) => {\n\t\tevent.preventDefault();\n\t\tthis.props.postMail({ body: this.state.body})\n\t}\n\n\trender(){\n\t\tconst { errors } = this.state;\n\t\tconst { \n\t\t\tclasses, \n\t\t\tUI:{ loading}\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<Fragment> \n\t\t\t <MyButton onClick={this.handleOpen } tip='Post Mail' >\n\t\t\t   <AddIcon />\n\t\t\t  </MyButton>\n\t\t\t  <Dialog\n\t\t\t  open={this.state.open} onClose={this.handleClose} fullWidth maxWidth='sm'>\n\t\t\t  \t<MyButton tip='close' onClick={this.handleClose} tipClassName={classes.closeButton}>\n\t\t\t  \t\t<CloseIcon />\n\t\t\t  \t</MyButton>\n\t\t\t  \t<DialogTitle>Post a new Mail</DialogTitle>\n\t\t\t  \t<DialogContent>\n\t\t\t  \t\t<form onSubmit={this.handleSubmit}>\n\t\t\t  \t\t  <TextField \n\t\t\t  \t\t    name='body'\n\t\t\t  \t\t    type='text' \n\t\t\t  \t\t    label='MAIL'\n\t\t\t  \t\t    multiline \n\t\t\t  \t\t    rows='3' \n\t\t\t  \t\t    placeholder='whats your destination?'\n\t\t\t  \t\t    error={errors.body ? true : false}\n\t\t\t  \t\t   helperText={errors.body}\n\t\t\t  \t\t  className={classes.textField}\n\t\t\t  \t\t  onChange={this.handleChange}\n\t\t\t  \t\t  fullWidth\n\t\t\t  \t\t   />\n\t\t\t  \t\t  <Button type='submit' variant='contained' color='primary'\n\t\t\t  \t\t  className={classes.submitButton} disabled={loading}>\n\t\t\t  \t\t    Submit\n\t\t\t  \t\t    { loading && (\n\t\t\t  \t\t     <CircularProgress size={30} className={classes.progressSpinner} />\n\t\t\t  \t\t    )}\n \t\t\t  \t\t  </Button>\n\t\t\t  \t\t</form>\n\t\t\t  \t</DialogContent>\n\t\t\t  </Dialog>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\nPostMail.propTypes = {\n\tpostMail: PropTypes.func.isRequired,\n\tclearErrors: PropTypes.func.isRequired,\n\tUI: PropTypes.object.isRequired,\n}\nconst mapStateToProps = (state) => ({\n\tUI: state.UI\n})\n\nexport default connect(mapStateToProps, { postMail, clearErrors })(withStyles(styles)(PostMail))\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}